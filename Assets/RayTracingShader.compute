#pragma kernel CSMain


RWTexture2D<float4> Result;
float4x4 _CameraToWorld, _CameraInverseProjection;
float2 _PixelOffset;
float4 _DirectionalLight;
float2 _Pixel;
float _Seed;

Texture2D<float4> _SkyboxTexture;
SamplerState sampler_SkyboxTexture;
static const float PI = 3.1415926535897932384626433f;
static const float EPSILON = 1e-8;

//Structure Declarations
struct Ray {
    float3 origin;
    float3 direction;
    float3 energy;
};
Ray CreateRay(float3 origin, float3 direction) {
    Ray ray;
    ray.origin = origin;
    ray.direction = direction;
    ray.energy = float3(1,1,1);
    return ray;
}


struct RayHit {
    float distance;
    float3 normal;
    float3 position;
    float3 albedo;
    float3 specular;
    float3 emission;
    float smoothness;
};

RayHit CreateRayHit(float distance, float3 normal, float3 position) {
    RayHit rayhit;
    rayhit.distance = distance;
    rayhit.normal = normal;
    rayhit.position = position;
    rayhit.albedo = float3(0, 0, 0);
    rayhit.specular = float3(0, 0, 0);
    rayhit.emission = float3(0, 0, 0);
    rayhit.smoothness = 0;
    return rayhit;
}
RayHit CreateRayHit() { 
    return CreateRayHit(1.#INF, float3(0, 0, 0), float3(0, 0, 0));
}

struct Sphere
{
    float3 center;
    float radius;
    float3 albedo;
    float3 specular;
    float3 emission;
    float smoothness;
};

StructuredBuffer<Sphere> _Spheres;

struct MeshObject {
    float4x4 localToWorldMatrix;
    int indices_offset;
    int indices_count;
};

StructuredBuffer<MeshObject> _MeshObjects;
StructuredBuffer<float3> _Vertices;
StructuredBuffer<int> _Indices;

Ray CreateCameraRay(float2 uv) {
    float3 origin = mul(_CameraToWorld, float4(0, 0, 0, 1)).xyz;
    float3 direction = mul(_CameraInverseProjection, float4(uv, 0, 1)).xyz;
    direction = mul(_CameraToWorld, float4(direction, 0)).xyz;
    direction = normalize(direction);
    return CreateRay(origin, direction);
}

float rand()
{
    float result = frac(sin(_Seed / 100.f * dot(_Pixel, float2(12.9898f, 78.233f))) * 43758.5453f);
    _Seed += 1.0f;
    return result;
}

//Intersection Functions
void IntersectGroundPlane(Ray ray, inout RayHit bestHit) {
    //calculate the distance along the ray where the groundplane is intersected
    float t = -ray.origin.y / ray.direction.y;
    if ( t > 0 && t < bestHit.distance) {
        bestHit.distance = t;
        bestHit.position = ray.origin + t * ray.direction;
        bestHit.normal = float3(0, 1, 0);
        bestHit.albedo = float3(250, 250, 255) / 255.0f;
        bestHit.specular = float3(.04, .04, .04);
        bestHit.smoothness = .2;
        bestHit.emission = float3(0, 0, 0);
    }
}
void IntersectSphere(Ray ray, inout RayHit bestHit, Sphere sphere) {
    float3 d = ray.origin - sphere.center;
    float p1 = -dot(ray.direction, d);
    float p2sqr = p1 * p1 - dot(d, d) + sphere.radius * sphere.radius;
    if (p2sqr < 0)
        return;
    float p2 = sqrt(p2sqr);
    float t = p1 - p2 > 0 ? p1 - p2 : p1 + p2;
    if (t > 0 && t < bestHit.distance) {
        bestHit.distance = t;
        bestHit.position = ray.origin + t * ray.direction;
        bestHit.normal = normalize(bestHit.position - sphere.center);
        bestHit.albedo = sphere.albedo;
        bestHit.specular = sphere.specular;
        bestHit.emission = sphere.emission;
        bestHit.smoothness = sphere.smoothness;
    }
}

bool IntersectTriangle_MT97(Ray ray, float3 vert0, float3 vert1, float3 vert2, inout float t, inout float u, inout float v) {
    //find vectors for two edges sharing vert0
    float3 edge1 = vert1 - vert0;
    float3 edge2 = vert2 - vert0;

    //begin calculating determinant - also used to calculate U
    float3 pvec = cross(ray.direction, edge2);

    //if determinant near zero, ray is in plane of triangle
    float det = dot(edge1, pvec);
    //use backface culling
    if (det < EPSILON) {
        return false;
    }
    float inv_det = 1.0f / det;

    //calculate distance from vert0 to ray origin
    float3 tvec = ray.origin - vert0;

    //calculate U param and test bounds
    u = dot(tvec, pvec) * inv_det;
    if (u < 0 || u > 1) {
        return false;
    }
    float3 qvec = cross(tvec, edge1);
    //calculate v parameter and test bounds
    v = dot(ray.direction, qvec) * inv_det;
    if (v < 0.0f || u + v > 1.0f)
        return false;

    //calculate t, ray intersects triangle
    t = dot(edge2, qvec) * inv_det;
    return true;
}

void IntersectMeshObject(Ray ray, inout RayHit bestHit, MeshObject meshObject) {
    uint offset = meshObject.indices_offset;
    uint count = offset + meshObject.indices_count;
    for (uint i = offset; i < count; i += 3) {
        float3 v0 = (mul(meshObject.localToWorldMatrix, float4(_Vertices[_Indices[i]], 1))).xyz;
        float3 v1 = (mul(meshObject.localToWorldMatrix, float4(_Vertices[_Indices[i + 1]], 1))).xyz;
        float3 v2 = (mul(meshObject.localToWorldMatrix, float4(_Vertices[_Indices[i + 2]], 1))).xyz;

        float t, u, v;
        if (IntersectTriangle_MT97(ray, v0, v1, v2, t, u, v)) {
            if (t > 0 && t < bestHit.distance) {
                bestHit.distance = t;
                bestHit.position = ray.origin + t * ray.direction;
                bestHit.normal = normalize(cross(v1 - v0, v2 - v0));
                bestHit.albedo = 0;
                bestHit.specular = .65;
                bestHit.smoothness = .99f;
                bestHit.emission = 0.0f;
            }
        }
    }
}

float3x3 GetTangentSpace(float3 normal) {
    float3 helper = float3(1, 0, 0);
    if (abs(normal.x) > .99f)
        helper = float3(0, 0, 1);

    //Generate Vectors
    float3 tangent = normalize(cross(normal, helper));
    float3 binormal = normalize(cross(normal, tangent));
    return float3x3(tangent, binormal, normal);
}

float3 SampleHemisphere(float3 normal, float alpha) {
    float cosTheta = pow(rand(), 1/(alpha + 1.0f));
    float sinTheta = sqrt(max(0, 1 - cosTheta * cosTheta));
    float phi = 2 * PI * rand();
    float3 tangentSpaceDir = float3(cos(phi) * sinTheta, sin(phi) * sinTheta, cosTheta);
    return mul(tangentSpaceDir, GetTangentSpace(normal));
}

//Basic Trace Function
RayHit Trace(Ray ray) {
    RayHit bestHit = CreateRayHit();
    
    IntersectGroundPlane(ray, bestHit);
    uint count, stride, i;
    _Spheres.GetDimensions(count, stride);
    for(i = 0; i < count; i++)
        IntersectSphere(ray, bestHit, _Spheres[i]);
    _MeshObjects.GetDimensions(count, stride);
    for (i = 0; i < count; i++)
        IntersectMeshObject(ray, bestHit, _MeshObjects[i]);
    return bestHit;
}

float sdot(float3 x, float3 y, float f = 1.0f) {
    return saturate(dot(x, y) * f);
}

float energy(float3 color) {
    return dot(color, 1.0f / 3.0f);
}

float SmoothnessToPhongAlpha(float s) {
    return pow(1000.0f, s * s);
}

//Basic Shading Function
float3 Shade(inout Ray ray, RayHit hit) {
    //return (float4(hit.distance, hit.distance, hit.distance, 1));
    if (hit.distance < 1.#INF) {
        //Phong Shading
        hit.albedo = min(1 - hit.specular, hit.albedo);
        float specChance = energy(hit.specular);
        float diffChance = energy(hit.albedo);
        

        float roulette = rand();
        if(roulette < specChance){
            //Specular Reflection
            float alpha = SmoothnessToPhongAlpha(hit.smoothness);
            ray.origin = hit.position + hit.normal * 0.001f;
            ray.direction = SampleHemisphere(reflect(ray.direction, hit.normal), alpha);
            float f = (alpha + 2) / (alpha + 1);
            ray.energy *= (1 / specChance) * hit.specular * sdot(hit.normal, ray.direction, f);
        }
        else if(diffChance > 0 && roulette < specChance + diffChance){
            //Diffuse Reflection
            ray.origin = hit.position + hit.normal * 0.001f;
            ray.direction = SampleHemisphere(hit.normal, 1.0f);
            ray.energy *= (1.0f / diffChance) * hit.albedo;
        }
        else {
            ray.energy = 0;
        }
        
        return hit.emission;
    }
    else {
        ray.energy = 0;
        float theta = acos(ray.direction.y) / -PI;
        float phi = atan2(ray.direction.x, -ray.direction.z) / -PI * .5f;
        return _SkyboxTexture.SampleLevel(sampler_SkyboxTexture, float2(phi, theta), 0).rgb;
    }
}

[numthreads(8, 8, 1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    _Pixel = id.xy;
    //Get dimensions of the Render Texture
    uint width, height;
    Result.GetDimensions(width, height);

    float2 uv = (float2(id.xy + _PixelOffset) / float2(width, height) * 2.0 - 1.0);
    Ray ray = CreateCameraRay(uv);

    float3 result = float3(0, 0, 0);
    for (int i = 0; i < 32; i++) {
        RayHit rayhit = Trace(ray);
        result += ray.energy * Shade(ray, rayhit);
        if (!any(ray.energy))
            break;
    }
    
    Result[id.xy] = float4(result, 1);
}
